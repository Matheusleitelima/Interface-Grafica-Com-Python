# Interface Gr√°fica com Python (GUI)

## Conceitos importantes

* **GUI (Graphical User Interface)**: Interface gr√°fica que permite intera√ß√£o do usu√°rio com aplicativos.
* **Frameworks**: Ferramentas que facilitam a cria√ß√£o de interfaces gr√°ficas.
* **Experi√™ncia do usu√°rio (UX)**: Foco na facilidade e na intera√ß√£o da aplica√ß√£o com quem usa.

## Compara√ß√£o de Frameworks

| Framework         | Principais caracter√≠sticas                                                        | Uso recomendado                                                |
| ----------------- | --------------------------------------------------------------------------------- | -------------------------------------------------------------- |
| **Tkinter**       | Padr√£o do Python, leve, f√°cil de aprender                                         | Ideal para iniciantes e aplica√ß√µes simples                     |
| **PyQt / PySide** | Robusto, permite criar GUIs complexas, comercialmente vi√°vel                      | Aplica√ß√µes profissionais e complexas                           |
| **Kivy**          | Multiplataforma (Windows, Linux, macOS, Android, iOS), escrito em Python e Cython | Apps m√≥veis e desktop que precisam rodar em v√°rias plataformas |
| **Flexx**         | Baseado em tecnologia web (HTML, CSS, JS), roda no navegador                      | Aplica√ß√µes GUI modernas com base web                           |
| **CEF Python**    | Embute o Chrome em Python, permite criar apps baseados em navegador               | Apps que precisam usar Chromium internamente                   |
| **PyForms**       | Suporta web, terminal, desktop GUI, f√°cil de criar formul√°rios                    | Ferramentas administrativas e prot√≥tipos r√°pidos               |
| **wxPython**      | Framework tradicional, multiplataforma                                            | Aplica√ß√µes desktop nativas                                     |
| **PyAutoGUI**     | Controla mouse e teclado, ideal para automa√ß√£o e testes de interface              | Testes automatizados ou bots de intera√ß√£o com a GUI            |
| **PySimpleGUI**   | Simplifica a cria√ß√£o de GUI, baseado em Tkinter, Qt ou Remi                       | Aplica√ß√µes r√°pidas e simples, prototipagem                     |

## Exemplos e testes

### Tkinter

```bash
pip install tkinter
```

```python
import tkinter
tkinter._test()
```

### PyQt5

```bash
pip install PyQt5
```

```python
import sys
from PyQt5 import QtCore, QtWidgets
from PyQt5.QtWidgets import QMainWindow, QLabel, QGridLayout, QWidget
from PyQt5.QtCore import QSize

class HelloWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setMinimumSize(QSize(280, 120))
        self.setWindowTitle("Ol√°, Mundo! Exemplo PyQt5")
        centralWidget = QWidget(self)
        self.setCentralWidget(centralWidget)
        gridLayout = QGridLayout(self)
        centralWidget.setLayout(gridLayout)
        title = QLabel("Ol√° Mundo para PyQt", self)
        title.setAlignment(QtCore.Qt.AlignCenter)
        gridLayout.addWidget(title, 0, 0)

if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    mainWin = HelloWindow()
    mainWin.show()
    sys.exit(app.exec_())
```

### Kivy

```bash
pip install Kivy
```

```python
from kivy.app import App
from kivy.uix.label import Label

class MeuApp(App):
    def build(self):
        return Label(text="Ol√°, Matheus! üöÄ\nSeu Kivy est√° funcionando!")

if __name__ == "__main__":
    MeuApp().run()
```

### Flexx

```bash
pip install flexx
```

```python
from flexx import flx

class Exemplo(flx.Widget):
    def init(self):
        flx.Button(text='Ol√°')
        flx.Button(text='Mundo')

if __name__ == '__main__':
    a = flx.App(Exemplo, title='Flexx demonstra√ß√£o')
    a.launch()
    flx.run()
```

### CEF Python

```bash
pip install cefpython3
```

```python
from cefpython3 import cefpython as cef
import platform
import sys

def main():
    check_versions()
    sys.excepthook = cef.ExceptHook
    cef.Initialize()
    cef.CreateBrowserSync(
        url="https://www.google.com/",
        window_title="Ol√°, mundo! Este √© o primeiro exemplo do CEF python"
    )
    cef.MessageLoop()
    cef.Shutdown()

def check_versions():
    ver = cef.GetVersion()
    print(f"[hello_world.py] CEF python {ver['version']}")
    print(f"[hello_world.py] Chromium {ver['chrome_version']}")
    print(f"[hello_world.py] CEF {ver['cef_version']}")
    print(f"[hello_world.py] Python {platform.python_version()} {platform.architecture()[0]}")
    assert cef.__version__ >= "57.0", "CEF python v57.0+ required to run this"

if __name__ == '__main__':
    main()
```

### PyForms

```bash
pip install pyforms
```

```python
import pyforms
from pyforms.basewidget import BaseWidget
from pyforms.controls import ControlText, ControlButton

class ExemploSimples(BaseWidget):
    def __init__(self):
        super().__init__('Exemplo Simples')
        self._nome = ControlText('Nome', 'Default value')
        self._sobrenome = ControlText('Sobrenome')
        self._nomeCompleto = ControlText('Nome completo')
        self._button = ControlButton('Pressione o Bot√£o')
        self._button.value = self.botao_clicado

    def botao_clicado(self):
        self._nomeCompleto.value = f"{self._nome.value} {self._sobrenome.value}"

if __name__ == "__main__":
    from pyforms import start_app
    start_app(ExemploSimples)
```

### wxPython

```bash
pip install wxpython
```

```python
import wx

class Janela(wx.Frame):
    def __init__(self, parent, title):
        super().__init__(parent, title=title, size=(400,300))
        self.panel = wx.Panel(self)
        self.text_ctrl = wx.TextCtrl(self.panel, pos=(5,5))
        self.btn_test = wx.Button(self.panel, label='Pressione esse componente!', pos=(5,55))

class ExemploApp(wx.App):
    def OnInit(self):
        self.frame = Janela(None, "Janela wxPython")
        self.frame.Show()
        return True

app = ExemploApp()
app.MainLoop()
```

### PyAutoGUI

```bash
pip install pyautogui
```

```python
import pyautogui
pyautogui.moveTo(100, 150)
pyautogui.click()
pyautogui.write('Ol√°, Mundo!', interval=0.25)
pyautogui.alert('Esta √© a mensagem para Tela.')
```

### PySimpleGUI

```bash
pip install PySimpleGUI
```

```python
import PySimpleGUI as sg
sg.theme('DarkAmber')

layout = [
    [sg.Text('Texto na linha 1')],
    [sg.Text('Entre com um texto na linha 2'), sg.InputText()],
    [sg.Button('Ok'), sg.Button('Cancel')]
]

window = sg.Window('Bem-Vindo ao PySimpleGUI', layout)

while True:
    event, values = window.read()
    if event == sg.WIN_CLOSED or event == 'Cancel':
        break
    print('Voc√™ entrou com:', values[0])

window.close()
```

## Vantagens e desvantagens gerais

* **Vantagem**: Melhor intera√ß√£o com o usu√°rio, aplica√ß√µes visuais e intuitivas.
* **Desvantagem**: Maior consumo de recursos, exige aten√ß√£o ao design e √† l√≥gica da GUI.
